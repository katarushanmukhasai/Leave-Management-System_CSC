import boto3
import json

def lambda_handler(event, context):
    subject = "Your Leave Acceptance"
    # Get the email address from the event
    email = event['Email']
    print(f"Email: {email}")

    # Get the leave request information from the event
    name = event['Name']
    leave_type = event['leave_type']
    start_date = event['start_date']
    end_date = event['end_date']
    print(f"Name: {name}, Leave type: {leave_type}, Start date: {start_date}, End date: {end_date}")

    # Check if the email is a verified identity in SES
    ses_client = boto3.client('ses', region_name='us-east-1')
    response = ses_client.list_identities(IdentityType='EmailAddress')
    verified_emails = response.get('Identities', [])

    if email not in verified_emails:
        # If the email is not already verified, send a verification request
        ses_client.verify_email_identity(EmailAddress=email)
        return f"Email address {email} is not verified. A verification email has been sent. Please verify and try again."

    try:
        # Check if the email is already present in DynamoDB
        table_name = 'leavemanagement'
        dynamodb = boto3.resource('dynamodb')
        table = dynamodb.Table(table_name)
        
        response = table.get_item(
            Key={
                'Email': email
                 
            }
        )
        
        existing_status = 'Approved'  # Default status
        
        if 'Item' in response:
            # Email is already present, update the leave_type by adding the new type
            existing_item = response['Item']
            existing_leave_types = existing_item.get('leave_type', [])
            existing_status = existing_item.get('Status', 'Approved')  # Retrieve existing status
            
            # Ensure existing_leave_types is a list
            if not isinstance(existing_leave_types, list):
                existing_leave_types = [existing_leave_types]
            
            existing_leave_types.append(leave_type)
            
            # Update the status based on leave types count
            if len(existing_leave_types) > 3:
                existing_status = 'Rejected'
            else:
                existing_status = 'Approved'
            
            # Update the status in DynamoDB
            response = table.update_item(
                Key={
                    'Email': email
                },
                UpdateExpression='SET leave_type = :new_leave_types, #s = :status',
                ExpressionAttributeValues={
                    ':new_leave_types': existing_leave_types,
                    ':status': existing_status
                },
                ExpressionAttributeNames={'#s': 'Status'}
            )
            print(f"Update response: {response}")
            
            # Add new start_date and end_date to existing lists
            existing_start_dates = existing_item.get('start_date', [])
            existing_end_dates = existing_item.get('end_date', [])
            existing_start_dates.append(start_date)
            existing_end_dates.append(end_date)
            
            # Update start_date and end_date in DynamoDB
            response = table.update_item(
                Key={
                    'Email': email
                },
                UpdateExpression='SET start_date = :new_start_dates, end_date = :new_end_dates',
                ExpressionAttributeValues={
                    ':new_start_dates': existing_start_dates,
                    ':new_end_dates': existing_end_dates
                }
            )
            print(f"Update response: {response}")
            
        else:
            # Email is not present, add a new item
            response = table.put_item(
                Item={
                    'Email': email,
                    'Name': name,
                    'leave_type': [leave_type],
                    'start_date': [start_date],
                    'end_date': [end_date],
                    'Status': existing_status  # Default to 'Approved' for new entries
                }
            )
            print(f"Update response: {response}")

        # Send email using the AWS SES client
        message = f"Dear {name}, Your {leave_type} leave request from {start_date} to {end_date} has been {existing_status.lower()}, further queries contact: 7093233141"
        print(f"Message: {message}")
        response = ses_client.send_email(
            Source="katarushanmukhasai@gmail.com",
            Destination={
                'ToAddresses': [email]
            },
            Message={
                'Subject': {'Data': subject},
                'Body': {'Text': {'Data': message}}
            }
        )
        print(f"SES response: {response}")

        return f"Leave request has been received by management. A confirmation email has been sent to you shortly."

    except Exception as e:
        print(f"Error: {e}")
        return f"An error occurred: {e}. Please check logs for more information."
import boto3
import json

def lambda_handler(event, context):
    subject = "Your Leave Acceptance"
    # Get the email address from the event
    email = event['Email']
    print(f"Email: {email}")

    # Get the leave request information from the event
    name = event['Name']
    leave_type = event['leave_type']
    start_date = event['start_date']
    end_date = event['end_date']
    print(f"Name: {name}, Leave type: {leave_type}, Start date: {start_date}, End date: {end_date}")

    # Check if the email is a verified identity in SES
    ses_client = boto3.client('ses', region_name='us-east-1')
    response = ses_client.list_identities(IdentityType='EmailAddress')
    verified_emails = response.get('Identities', [])

    if email not in verified_emails:
        # If the email is not already verified, send a verification request
        ses_client.verify_email_identity(EmailAddress=email)
        return f"Email address {email} is not verified. A verification email has been sent. Please verify and try again."

    try:
        # Check if the email is already present in DynamoDB
        table_name = 'leavemanagement'
        dynamodb = boto3.resource('dynamodb')
        table = dynamodb.Table(table_name)
        
        response = table.get_item(
            Key={
                'Email': email
                 
            }
        )
        
        existing_status = 'Approved'  # Default status
        
        if 'Item' in response:
            # Email is already present, update the leave_type by adding the new type
            existing_item = response['Item']
            existing_leave_types = existing_item.get('leave_type', [])
            existing_status = existing_item.get('Status', 'Approved')  # Retrieve existing status
            
            # Ensure existing_leave_types is a list
            if not isinstance(existing_leave_types, list):
                existing_leave_types = [existing_leave_types]
            
            existing_leave_types.append(leave_type)
            
            # Update the status based on leave types count
            if len(existing_leave_types) > 3:
                existing_status = 'Rejected'
            else:
                existing_status = 'Approved'
            
            # Update the status in DynamoDB
            response = table.update_item(
                Key={
                    'Email': email
                },
                UpdateExpression='SET leave_type = :new_leave_types, #s = :status',
                ExpressionAttributeValues={
                    ':new_leave_types': existing_leave_types,
                    ':status': existing_status
                },
                ExpressionAttributeNames={'#s': 'Status'}
            )
            print(f"Update response: {response}")
            
            # Add new start_date and end_date to existing lists
            existing_start_dates = existing_item.get('start_date', [])
            existing_end_dates = existing_item.get('end_date', [])
            existing_start_dates.append(start_date)
            existing_end_dates.append(end_date)
            
            # Update start_date and end_date in DynamoDB
            response = table.update_item(
                Key={
                    'Email': email
                },
                UpdateExpression='SET start_date = :new_start_dates, end_date = :new_end_dates',
                ExpressionAttributeValues={
                    ':new_start_dates': existing_start_dates,
                    ':new_end_dates': existing_end_dates
                }
            )
            print(f"Update response: {response}")
            
        else:
            # Email is not present, add a new item
            response = table.put_item(
                Item={
                    'Email': email,
                    'Name': name,
                    'leave_type': [leave_type],
                    'start_date': [start_date],
                    'end_date': [end_date],
                    'Status': existing_status  # Default to 'Approved' for new entries
                }
            )
            print(f"Update response: {response}")

        # Send email using the AWS SES client
        message = f"Dear {name}, Your {leave_type} leave request from {start_date} to {end_date} has been {existing_status.lower()}, further queries contact: 7093233141"
        print(f"Message: {message}")
        response = ses_client.send_email(
            Source="katarushanmukhasai@gmail.com",
            Destination={
                'ToAddresses': [email]
            },
            Message={
                'Subject': {'Data': subject},
                'Body': {'Text': {'Data': message}}
            }
        )
        print(f"SES response: {response}")

        return f"Leave request has been received by management. A confirmation email has been sent to you shortly."

    except Exception as e:
        print(f"Error: {e}")
        return f"An error occurred: {e}. Please check logs for more information."
